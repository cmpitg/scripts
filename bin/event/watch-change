#!/usr/bin/env tclsh

proc slurp {cmds} {
    set fd [open [list | {*}$cmds] r]
    set data [read $fd]
    close $fd

    return $data
}

proc lpop {listVar} {
    upvar 1 $listVar l
    set res [lindex $l 0]
    set l [lreplace $l [set l 0] 0]
    return $res
}

proc takeUntil {listVar element} {
    upvar 1 $listVar l
    set res {}

    set x [lpop l]
    while {$x ne $element && $x ne ""} {
        lappend res $x
        set x [lpop l]
    }

    return $res
}

set ::TIMEOUT [lpop ::argv]
set ::GET_STATE_CMD [takeUntil ::argv "-"]
set ::TRIGGER_CMD [lrange $::argv 0 end]

# puts "$::TIMEOUT"
# puts "$::GET_STATE_CMD"
# puts "$::TRIGGER_CMD"
# exit 0

if {$::TIMEOUT eq "" || $::GET_STATE_CMD eq "" || $::TRIGGER_CMD eq ""} {
    puts stderr "ERROR: Timeout, get-state, and trigger must exist"
    exit 2
}

set state [slurp $::GET_STATE_CMD]
while {1} {
    after $::TIMEOUT
    set newState [slurp $::GET_STATE_CMD]
    if {$newState ne $state} {
        catch {exec {*}$::TRIGGER_CMD <@ stdin >@ stdout 2>@ stderr}
    }
    set state $newState
}
