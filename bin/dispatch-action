#!/usr/bin/env tclsh

# TODO: Documentation
# TODO: Help
# TODO: Read stdin?
# TODO: report-missing-executables
# TODO: Declarative configuration?

# TODO: Samples
# dispatch-action 'ssh://<foobar>!' 'w'
# dispatch-action 'ssh://<username>@<foobar>' '!' 'w'
# dispatch-action 'ssh://<username>@<foobar>:<port>' '!' 'w'
# dispatch-action 'ssh://<foobar>:/tmp/'
# dispatch-action 'ssh://<foobar>:/tmp/foobar'
# dispatch-action 'ssh://<username>@<foobar>:/tmp/'
# dispatch-action 'ssh://<username>@<foobar>:<port>:/tmp/foobar'

package require Tclx

##############################################################################
# Helpers
##############################################################################

## TODO: Documentation
proc stripPrefix {text prefix} {
    return [string range $text [string length $prefix] end]
}

proc orString {str elseStr} {
    if {[string trim $str] eq ""} {
        return $elseStr
    } else {
        return $str
    }
}

proc substEnvVars {str} {
    return [exec echo $str | envsubst]
}

## TODO: Documentation
proc splitString {text str {startIndex 0}} {
    set index [string first $str $text $startIndex]
    if {$index != -1} {
        set i1 [expr {$index - 1}]
        set i2 [expr {$index + [string length $str]}]
        return [list [string range $text 0 $i1] [string range $text $i2 end]]
    } else {
        return [list $text ""]
    }
}

proc constructEnrichedPathCmd {cmd} {
    return "deep-exec $cmd"
}

proc copyToClipboard {text} {
    set fd [open "| xsel -b" w]
    puts $fd $text
    close $fd
}

#
# Try opening a file.  TODO: Documentation for file pattern.
#
# \(~file-pattern? \"/tmp/aoeu\"\)                                        ⇒ t
# \(~file-pattern? \"/tmp/aoeu:10\"\)                                     ⇒ t
# \(~file-pattern? \"/tmp/aoeu:/hello world/\"\)                          ⇒ t
# \(~file-pattern? \"/tmp/non-existent\"\)                                ⇒ nil

# /tmp/aoeu -> /tmp/aoeu
# /tmp/aoeu:10
# /tmp/aoeu /hello/
# /tmp/aoeu:10 /hello/
# /tmp/aoeu +10 /hello/
proc tryOpeningFile {serverName inNewFrameP rest} {
    # Visit a file and return its buffer
    proc visitFile {serverName path} {
        return [exec rmacs --client-opts --alternate-editor=vim --name $serverName --no-wait visit $path <@ stdin 2>@ stderr]
    }

    proc gotoLine {serverName buffer number} {
        return [exec rmacs --client-opts --alternate-editor=vim --name $serverName --with-buffer $buffer eval "(goto-line $number)" <@ stdin >@ stdout 2>@ stderr]
    }

    proc gotoPattern {serverName buffer pattern} {
        return [exec rmacs --client-opts --alternate-editor=vim --name $serverName --with-buffer $buffer eval "(re-search-forward \"$pattern\")" <@ stdin >@ stdout 2>@ stderr]
    }

    set possiblePath [file normalize [lindex $rest 0]]
    if {[file exists $possiblePath]} {
        set buffer [visitFile $serverName $possiblePath]
    } else {
        set lastSepIndex [string last ":" $possiblePath]
        if {$lastSepIndex == -1} {
            return 0
        }

        set possibleRealPath [string range $possiblePath 0 $lastSepIndex-1]
        if {![file exists $possibleRealPath]} {
            return 0
        }
        set buffer [visitFile $serverName $possibleRealPath]
        set lineNumber [string range $possiblePath $lastSepIndex+1 end]
        set possiblePath $possibleRealPath
        catch {gotoLine $serverName $buffer $lineNumber}
    }

    foreach arg [lrange $rest 1 end] {
        switch -glob $arg {
            "+*" {
                set lineNumber [stripPrefix $arg {+}]
                catch {gotoLine $serverName $buffer $lineNumber}
            }
            "/*/" {
                set pattern [string range $arg 1 end-1]
                catch {gotoPattern $serverName $buffer $pattern}
            }
            default {
                puts stderr "ERROR: Unrecognized pattern for file path: $arg"
            }
        }
    }

    if {$inNewFrameP} {
        execl rmacs [list --client-opts --alternate-editor=vim --name $serverName --new-frame open $possiblePath]
    } else {
        exec rmacs --client-opts --alternate-editor=vim --name $serverName open $possiblePath <@ stdin >@ stdout 2>@ stderr
    }

    return 1
}

proc callWMClientMenu {wmName client} {
    switch $wmName {
        "awesome" {
            execl awesome-client [list "display_client_menu_by_actionable_title('[string trim $client]')"]
        }
        "herbstluftwm" {
            set winID [lindex [split [string trim $client] " "] end]
            execl enrich-path [list wm herbstluft - call-menu client $winID]
        }
        default {
            execl run-menu [list "-e" "Error: Unrecognized window manager wmName=$wmName for client menu"]
        }
    }
}

proc callWMDesktopMenu {wmName desktop} {
    switch $wmName {
        "herbstluftwm" {
            execl enrich-path [list wm herbstluft - call-menu tag $desktop]
        }
        default {
            execl run-menu [list "-e" "Error: Unrecognized window manager wmName=$wmName for desktop menu"]
        }
    }
}

##############################################################################
# Main
##############################################################################

set text [string trim [join $::argv " "]]

if {[info exists ::env(RMACS_NAME)]} {
    set rmacsServerName $::env(RMACS_NAME)
} else {
    set rmacsServerName "edit"
}

if {$text ne ""} {
    switch -glob $text {
        "mux://*!!!*" {
            set rest [splitString [stripPrefix $text {mux://}] "!!!"]
            set muxSessionName [string trim [orString [substEnvVars [lindex $rest 0]] ":."]]
            set cmd [constructEnrichedPathCmd [lindex $rest 1]]
            execl with-mux-session [list $muxSessionName "-" {*}$cmd]
        }
        "mux://*!!*" {
            set rest [splitString [stripPrefix $text {mux://}] "!!"]
            set muxSessionName [string trim [orString [substEnvVars [lindex $rest 0]] ":."]]
            set cmd [constructEnrichedPathCmd [lindex $rest 1]]
            execl with-mux-session [list $muxSessionName "-" with-pause {*}$cmd]
        }
        "mux://*!*" {
            set rest [splitString [stripPrefix $text {mux://}] "!"]
            set muxSessionName [string trim [orString [substEnvVars [lindex $rest 0]] ":."]]
            set cmd [constructEnrichedPathCmd [lindex $rest 1]]
            exec tmux send-keys -l -t $muxSessionName $cmd
            execl tmux [list send-keys -t $muxSessionName Enter]
        }
        "ssh://*!*" {
            # Execute an SSH command
            set parts [splitString $text "!"]

            set hostExpr [string trim [substEnvVars [lindex $parts 0]]]
            set cmd [lindex $parts 1]

            execl ssh [list $hostExpr {*}$cmd]
        }
        "ssh://*:/*/" {
            # Expand a remote dir via SSH
            set parts [splitString [string trim $text] ":/" [string length "ssh://"]]

            set hostExpr [string trim [substEnvVars [lindex $parts 0]]]
            set path "/[lindex $parts 1]"

            execl ssh [list $hostExpr ls -1 --indicator-style=slash --dereference --all --group-directories-first $path]
        }
        "ssh://*:/*" {
            # Edit a remote file via SSH
            # TODO: Make the edit functionality work
            set parts [splitString [string trim $text] ":/" [string length "ssh://"]]

            set hostExpr [string trim [substEnvVars [lindex $parts 0]]]
            set path "/[lindex $parts 1]"

            execl ssh [list $hostExpr cat $path]
        }
        "*/" {
            set path [file nativename [substEnvVars [string trim $text]]]
            execl ls [list -1 --indicator-style=slash --dereference --all --group-directories-first $path]
        }
        "edit!*" {
            set path [exec which [stripPrefix $text {edit!}]]
            execl ffn [list $path]
        }
        "copy!*" {
            set text [stripPrefix $text {copy!}]
            copyToClipboard $text
        }
        "!%*" {
            set cmd [constructEnrichedPathCmd [stripPrefix $text {!%}]]
            execl with-env-user [list with-term-emu-sh --without-termux - $cmd]
        }
        "!@*" {
            set cmd [constructEnrichedPathCmd [stripPrefix $text {!@}]]
            execl with-env-user [list with-term-emu-sh --detach-termux - $cmd]
        }
        "!!!*" {
            set cmd [constructEnrichedPathCmd [stripPrefix $text {!!!}]]
            execl with-env-user [list with-term-emu-sh - $cmd]
        }
        "!!*" {
            set cmd [constructEnrichedPathCmd [stripPrefix $text {!!}]]
            # set cmd [stripPrefix $text {!!}]
            execl with-env-user [list with-term-emu-sh --pause-after-exec - "deep-exec $cmd"]
        }
        "tmux :: *" {
            set tmuxSessionName [string trim [stripPrefix $text "tmux :: "]]
            execl bring-termux-session $tmuxSessionName
        }
        "wind :: *" {
            set wmName [exec deep-exec wm/get-wm-name]
            callWMClientMenu $wmName $text
        }
        "desktop :: *" {
            set wmName [exec deep-exec wm/get-wm-name]
            set desktop [stripPrefix $text {desktop :: }]
            callWMDesktopMenu $wmName $desktop
        }
        "file :: *" {
            set path [string trim [stripPrefix $text {file :: }]]
            tryOpeningFile $rmacsServerName 1 [list $path]
        }
        default {
            if {![tryOpeningFile $rmacsServerName 0 $::argv]} {
                execl run-menu [list "-e" "Error: Unrecognized pattern: $text"]
            }
        }
    }
}
