#!/usr/bin/env tclsh

proc showHelp {} {
    puts {Usage:
  report-missing-executables <exec-1> <prog-1> ...
  report-missing-executables --help

Reports missing software by checking if their corresponding executables exist.
If all executables are found, exit with status 0; otherwise, exit with status
1.

E.g.

  report-missing-executables aria2c Aria2 wget Wget
    # aria2c and wget not found
    # Make sure Aria2, Wget are installed

  report-missing-executables aria2c Aria2 wget Wget curl cURL
    # aria2c, curl, and wget not found
    # Make sure Aria2, Wget, cURL are installed

  report-missing-executables aria2c Aria2 wget
    # Invalid arguments.  Number of arguments must be even.}
}

if {$::argc == 0 || $::argv eq {--help}} {
    showHelp
    exit 0
}

if {$::argc % 2 == 1} {
    puts stderr "Invalid arguments.  Number of arguments must be even."
    exit 2
}

proc notifyMissingExecs {execs} {
    set execStr [join $execs ", "]
    exec notify-send --urgency=critical "Missing Software" "Missing $execStr" <@ stdin >@ stdout 2>@ stderr
}

set missingExecs {}
set missingApps {}
for {set i 0} {$i < $::argc} {incr i 2} {
    set execName [lindex $::argv $i]
    set appName [lindex $::argv [expr {$i + 1}]]
    if {[catch {exec get-exec $execName > /dev/null 2> /dev/null}]} {
        set missingExecs [list {*}$missingExecs $execName]
        set missingApps [list {*}$missingApps $appName]
    }
}

switch [llength $missingApps] {
    0 {
        exit 0
    }
    1 {
        puts stderr "$missingExecs not found"
        puts stderr "Make sure $missingApps is installed"
        notifyMissingExecs $missingExecs
    }
    default {
        set execStr [join $missingExecs ", "]
        set appStr [join $missingApps ", "]
        puts stderr "$execStr not found"
        puts stderr "Make sure $appStr are installed"
        notifyMissingExecs $missingExecs
    }
}
