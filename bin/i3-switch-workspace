#!/usr/bin/env python3

#
# This file is part of i3-switch-window project.
#
# Copyright (C) 2015  Ha-Duong Nguyen <cmpitg@gmail.com>
#
# i3-switch-window is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# i3-switch-window is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# i3-switch-window.  If not, see <http://www.gnu.org/licenses/>.
#

#
# Requirements:
#   Python 3
#   dmenu with Xft patch
#

import json
import subprocess


dmenu_options         = '-p Workspace -i -l 30 -fn "Droid Sans-10" -nf "#ffa077" -nb "#202020"'
# dmenu_options         = '-p Workspace -b -i -l 30 -fn "Droid Sans-10" -nf "#ffa077" -nb "#202020"'
cmd_get_workspaces    = "i3-msg -t get_workspaces"
cmd_switch_workspace  = "i3-msg 'workspace {}'"


# TODO: Check if dmenu exists


def main():
    global dmenu_options
    global cmd_get_workspaces
    global cmd_switch_workspace

    workspaces = filter_workspaces(json.loads(subprocess.check_output(
        cmd_get_workspaces,
        stderr=subprocess.STDOUT,
        shell=True
    ).decode('utf-8')))

    chosen = dmenu(itemize(workspaces), dmenu_options)

    switch_to_workspace(
        chosen=chosen,
        cmd=cmd_switch_workspace
    )


def switch_to_workspace(chosen, cmd):
    """
    Switch to a chosen workspace.
    """
    subprocess.check_call(cmd.format(chosen), shell=True)


def filter_workspaces(workspaces):
    """
    Filter out current workspace.
    """
    return [
        w
        for w in workspaces
        if not w.get('focused', False)
    ]


def itemize(workspaces):
    """
    Itemize workspaces list for dmenu.
    """
    return "\n".join(map(lambda w: w['name'], workspaces))


def dmenu(items, dmenu_options):
    cmd = subprocess.Popen(
        "dmenu {}".format(dmenu_options),
        shell=True,
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    stdout, _ = cmd.communicate(items.encode('utf-8'))
    return stdout.decode('utf-8').strip('\n')


if __name__ == '__main__':
    main()
