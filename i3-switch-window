#!/usr/bin/env python3

#
# This file is part of i3-switch-window project.
#
# Copyright (C) 2015  Ha-Duong Nguyen <cmpitg@gmail.com>
#
# i3-switch-window is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# i3-switch-window is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# i3-switch-window.  If not, see <http://www.gnu.org/licenses/>.
#

#
# Requirements:
#   Python 3
#   dmenu with Xft patch
#

import json
import subprocess


# dmenu_options      = '-b -i -l 40 -fn "Droid Sans-10" -nf "#ffa077" -nb "#202020"'
dmenu_options      = '-p Window -i -l 40 -fn "Droid Sans-10" -nf "#ffa077" -nb "#202020"'
title_format       = "{} â€” {}"
cmd_get_tree       = "i3-msg -t get_tree"
cmd_switch_window  = "i3-msg '[con_id={}] focus'"


def main():
    global dmenu_options
    global cmd_get_tree
    global cmd_switch_window

    tree = json.loads(subprocess.check_output(
        cmd_get_tree,
        stderr=subprocess.STDOUT,
        shell=True
    ).decode('utf-8'))

    windows       = get_all_windows(tree)
    lookup_table  = build_lookup_table(windows)
    chosen        = dmenu(itemize(windows), dmenu_options)

    switch_to_window(
        chosen=chosen,
        table=lookup_table,
        cmd=cmd_switch_window
    )


def switch_to_window(chosen, table, cmd):
    window_id = table.get(chosen, "")
    subprocess.check_call(cmd.format(window_id), shell=True)


def window_as_string(with_id=False):
    global title_format

    def helper(window):
        title = title_format.format(window['class'], window['title'])
        if with_id:
            return title, window['id']
        else:
            return title

    return helper


def build_lookup_table(windows):
    stringifized = map(window_as_string(with_id=True), windows)
    return dict(stringifized)


    else:
        result = []

    lookup = lookup_func()
    target = dmenu(lookup.keys(), args.dmenu)
    id_ = lookup.get(target)
    success = action_func(lookup.get(target)) if id_ is not None else False

    exit(0 if success else 1)


if __name__ == '__main__':
    main()
